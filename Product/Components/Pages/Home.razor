@page "/"

<PageTitle>Home</PageTitle>

<div class="center">
    <h1>Welcome to the Steam Game Recommender!</h1>
    
    <h2>Enter your Steam ID:</h2>

    <input type="text" @bind:event="oninput" @bind:get="SteamID" @bind:set="async value => await OnSteamIDChanged(value ?? string.Empty)" class="@(IsValidSteamID ? "valid" : "invalid")"/><br/>
     <!-- Binds the value and input separately to control each, also sets CSS class based on input validation of the steam ID -->
    <a href="/Questions"><button class="@(IsValidSteamID ? "valid-button" : "invalid-button")" disabled=@(IsDisabled)>Continue</button></a>
    <!-- button is disabled if the steam ID is invalid, and the class is set based on the validation result -->
</div>

@code {
    private string? SteamID;
    public bool IsDisabled { get; set; } = true;
    // IsDisabled is used to disable the button if the SteamID is invalid
    private bool IsValidSteamID { get; set; } = false;
    private bool IsLoading { get; set; } = false;
    public string? json = string.Empty;
    //json is used to store the response from the API call

    private async Task ValidateSteamIDAsync()
    {
        Console.WriteLine("ValidateSteamIDAsync called");
        
        if(string.IsNullOrWhiteSpace(SteamID))
        {
            IsValidSteamID = false;
            IsDisabled = true;
            StateHasChanged();
            return;
            //if the SteamID is null or empty, set IsValidSteamID to false and return
        }
        
        IsLoading = true;

        try
        {
            var IsValid = await ApiValidateSteamIDAsync(SteamID);
            IsValidSteamID = IsValid;
            IsDisabled = !IsValid;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error validating Steam ID: {ex.Message}");
            IsValidSteamID = false;
            IsDisabled = true;
            StateHasChanged();
        }
        finally
        {
            IsLoading = false;
        }
    }

    private async Task<bool> ApiValidateSteamIDAsync(string steamID)
        {
             using var httpClient = new HttpClient();
             var response = await httpClient.GetAsync($"https://api.steampowered.com/IPlayerService/GetOwnedGames/v0001/?key=B1C07E0EC26DA74414AB6F48736452F8&steamid={steamID}&format=json");
             //calls the Steam API to validate the Steam ID, using a test key (will not work in production)
             Console.WriteLine($"Status: {response.StatusCode}");
             if(response.IsSuccessStatusCode)
             {
                json = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Response: {json}");
                return !string.IsNullOrWhiteSpace(json);
             }
             return false;
        }

    private async Task OnSteamIDChanged(string value)
    {
        Console.WriteLine("OnSteamIDChanged called");
        SteamID = value;
        // Assigns the value to SteamID

        await ValidateSteamIDAsync();
    }
}